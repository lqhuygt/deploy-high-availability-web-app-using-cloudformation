Description:   This template deploys the Loadbalancers, autoscaling groups, security groups, listeners, policies and ec2 instances needed by the Udagram application

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:
    LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0  

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    # S3BucketsRole:
    #     Type: AWS::IAM::Role
    #     Properties:
    #         AssumeRolePolicyDocument:
    #             Version: "2012-10-17"
    #             Statement:
    #                 - Effect: Allow
    #                   Principal:
    #                       Service:
    #                           - ec2.amazonaws.com
    #                   Action:
    #                       - sts:AssumeRole
    #         Path: "/"

    # S3BucketsInstanceProfile:
    #     Type: AWS::IAM::InstanceProfile
    #     Properties:
    #         Path: "/"
    #         Roles:
    #             - Ref: S3BucketsRole

    # S3BucketsPolicy:
    #     Type: AWS::IAM::Policy
    #     Properties:
    #         PolicyName: S3BucketsPolicy
    #         PolicyDocument:
    #             Statement:
    #                 - Effect: Allow
    #                   Action:
    #                       - s3:*
    #                   Resource: "*"
    #         Roles:
    #             - Ref: S3BucketsRole

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install apache2 -y
              systemctl start apache2.service       
              cd /var/www/html
              echo "Udacity Demo Web Server Up and Running!" > index.html
            #   sudo aws s3 cp s3://huylq-webapp/index.html .   
          ImageId: ami-0ac73f33a1888c64a
        #   IamInstanceProfile: !Ref S3BucketsInstanceProfile
          SecurityGroups:
              - Ref: WebServerSecGroup
          InstanceType: t3.medium
          BlockDeviceMappings:
              - DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: "3"
            MaxSize: "5"
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN01"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN02"
            SecurityGroups:
                - Ref: LoadBalancerSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: "80"
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    WALB:
        Description: The URL of the web application load balancer
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]